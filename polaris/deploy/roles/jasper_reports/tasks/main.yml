---
- name: Create package
  block:
  - name: Ensure all required inputs are valid or not blank
    fail:
      msg: "Error: invalid inputs"
    when: |
      jasper_server_instance not in ['JCRS', 'NRSRS'] or
      jasper_project_name in jasper_invalid_project_names or jasper_project_name != jasper_project_name.upper()

  - name: Copy resource files
    copy:
      src: "{{ jasper_source_path }}/jasper-server/src/main/resources/"
      dest: "{{ jasper_staging_dir }}/jcrs-reports"

  - name: Copy common files
    copy:
      src: "{{ jasper_source_path }}/jasper-server/src/main/common/resources/JCRS/Common"
      dest: "{{ jasper_staging_dir }}/jcrs-reports/resources/JCRS"

  - name: Copy template files
    copy:
      src: "{{ jasper_source_path }}/jasper-server/src/main/template/"
      dest: "{{ jasper_staging_dir }}/jcrs-reports"

  - name: Generate config files
    template:
      src: "templates/{{ jasper_server_instance }}_{{ jasper_project_name }}.xml.j2"
      dest: "{{ jasper_staging_dir }}/jcrs-reports/resources/{{ jasper_server_instance }}/Data_Sources/{{ jasper_server_instance }}_{{ jasper_project_name }}.xml"

  - name: Create import package
    archive:
      path: "{{ jasper_staging_dir }}/jcrs-reports/"
      dest: "{{ jasper_staging_dir }}/jcrs-reports.zip"
      format: zip
  tags: create_package

- name: Deploy package
  block:
  - name: Ensure all required inputs are valid or not blank
    fail:
      msg: "Error: invalid inputs"
    when: |
      jasper_server_instance not in ['JCRS', 'NRSRS'] or
      jasper_project_name in jasper_invalid_project_names or jasper_project_name != jasper_project_name.upper() or
      jasper_ds_0_url == '' or
      jasper_ds_0_user == '' or
      jasper_ds_0_password == '' or
      jasper_deployer_url == '' or
      jasper_deployer_user == '' or
      jasper_deployer_password == '' or
      jasper_cookie_key == '' or
      jasper_route_id == ''

  - name: Install xmllint on Alpine Linux
    apk:
      name: libxml2-utils
      state: present
    when: ansible_os_family == "Alpine"

  - name: "Get server info for {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    uri:
      url: "{{ jasper_deployer_url }}/rest_v2/serverInfo"
      force_basic_auth: yes
      user: "{{ jasper_deployer_user }}"
      password: "{{ jasper_deployer_password }}"
      method: GET
      headers:
        Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
      return_content: true
      validate_certs: false
    register: server_info
    failed_when: server_info.status != 200

  - name: Print server info for {{ jasper_server_instance }} server instance node {{ jasper_route_id }}
    debug:
      msg: "Requesting URL: {{ server_info.url }}"

  - name: "Delete the reports and datasource on the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    uri:
      url: "{{ jasper_deployer_url }}/rest/resource/{{ item }}"
      force_basic_auth: yes
      user: "{{ jasper_deployer_user }}"
      password: "{{ jasper_deployer_password }}"
      method: DELETE
      headers:
        Content-Type: application/x-www-form-urlencoded
        Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
      return_content: true
      validate_certs: false
      status_code: [200, 404]
    loop:
      - "{{ jasper_server_instance }}/{{ jasper_project_name }}"
      - "{{ jasper_server_instance }}/Data_Sources/{{ jasper_server_instance }}_{{ jasper_project_name }}"

  - name: "Import the package on the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    uri:
      url: "{{ jasper_deployer_url }}/rest_v2/import"
      force_basic_auth: yes
      user: "{{ jasper_deployer_user }}"
      password: "{{ jasper_deployer_password }}"
      method: POST
      headers:
        Content-Type: application/zip
        Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
      src: "{{ jasper_staging_dir }}/jcrs-reports.zip"
      return_content: true
      validate_certs: false
    register: import_response

  - name: "Extract the state id for the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    shell: |
      echo "{{ import_response.content }}" \
      | sed 's/<?xml version=1.0 encoding=UTF-8 standalone=yes?>/<?xml version="1.0" encoding="UTF-8" standalone="yes"?>/' \
      | xmllint --xpath '/state/id/text()' -
    register: state_id

  - name: pause
    pause:
      seconds: "{{ jasper_pause_seconds }}"

  - name: "Request the import status from the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    uri:
      url: "{{ jasper_deployer_url }}/rest_v2/import/{{ state_id.stdout }}/state"
      force_basic_auth: yes
      user: "{{ jasper_deployer_user }}"
      password: "{{ jasper_deployer_password }}"
      method: GET
      headers:
        Cookie: "{{ jasper_cookie_key }}={{ jasper_route_id }}"
      return_content: true
      validate_certs: false
    register: import_status

  - name: "Extract the import status message for the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    shell: |
      echo "{{ import_status.content }}" \
      | sed 's/<?xml version=1.0 encoding=UTF-8 standalone=yes?>/<?xml version="1.0" encoding="UTF-8" standalone="yes"?>/' \
      | xmllint --xpath '/state/message/text()' -
    register: import_status_message

  - name: "Print the import status message for the {{ jasper_server_instance }} server instance node {{ jasper_route_id }}"
    debug:
      msg: "{{ import_status_message.stdout }}"
    failed_when: import_status_message.stdout != "Import succeeded."
  tags: deploy_package

- name: Delete staging directory
  file:
    path: "{{ jasper_staging_dir}}"
    state: absent
  tags: delete_staging_dir
