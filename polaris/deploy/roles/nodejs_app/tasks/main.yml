---
- name: Ensure create_project_directories was called before
  fail:
    msg: "Error: create_project_directories must be called before!"
  when: not role_create_project_directories_called | default(false) | bool

- name: "Ensuring service is stopped"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "stop"
    service_control_user: "{{ nodejs_app_install_user }}"
    service_control_handler: "{{ nodejs_app_control_handler }}"

- name: "Setup handler {{ nodejs_app_control_handler }}"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "setup"
    service_control_home: "{{ nodejs_app_service_current_home }}"
    service_control_user: "{{ nodejs_app_install_user }}"
    service_control_handler: "{{ nodejs_app_control_handler }}"

- name: "required directories"
  file:
    path: "{{ item }}"
    state: directory
    mode: "0775"
  with_items:
    - "{{ nodejs_app_service_install_app_home }}"
    - "{{ nodejs_app_service_data_home }}"
    - "{{ nodejs_app_service_log_home }}"
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Archive the pulled package locally
  ansible.builtin.archive:
    path: "{{ nodejs_app_service_copy_src }}"
    dest: "/tmp/app.zip"
    format: zip
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: List contents of the folder
  ansible.builtin.find:
    paths: "/tmp"  # Replace with your actual folder path
    file_type: any  # List both files and directories
  register: folder_contents
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Show folder contents
  ansible.builtin.debug:
    var: folder_contents.files

- name: Debug the output
  ansible.builtin.debug:
    var: zip_check.stdout

- name: Copy zip file to remote server
  ansible.builtin.copy:
    src: "/tmp/app.zip"
    dest: "{{ nodejs_app_service_install_tmp_home }}/app.zip"
    mode: "0755"
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Unzip application on remote server
  ansible.builtin.unarchive:
    src: "/tmp/app.zip"
    dest: "{{ nodejs_app_service_install_app_home }}"
    remote_src: yes
    extra_opts: [ "-o" ]  # Overwrite existing files if needed
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Remove zip file from remote server (optional)
  ansible.builtin.file:
    path: "/tmp/app.zip"
    state: absent
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Deploy start script
  template:
    src: "start.sh.j2"
    dest: "{{ nodejs_app_service_install_home }}/start.sh"
    mode: "0755"
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: Deploy env script
  template:
    src: "setenv.sh.j2"
    dest: "{{ nodejs_app_service_install_home }}/setenv.sh"
    mode: "0755"
  become: yes
  become_user: "{{ nodejs_app_install_user }}"

- name: "Start service"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "start"
    service_control_user: "{{ nodejs_app_install_user }}"
    service_control_handler: "{{ nodejs_app_control_handler }}"