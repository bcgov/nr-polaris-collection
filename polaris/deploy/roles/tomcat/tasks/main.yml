---
- name: Ensure create_project_directories was called before
  ansible.builtin.fail:
    msg: "Error: create_project_directories must be called before!"
  when: not role_create_project_directories_called | default(false) | bool

- name: Get Latest Tomcat Minor Version
  ansible.builtin.shell: "curl -s {{ tomcat_mirror }}/dist/tomcat/tomcat-{{ tomcat_major_version }}/ | grep -oP '(?<=v){{ tomcat_major_version }}\\.\\d+\\.\\d+' | sort -Vr | head -n1"
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  register: latest_tomcat_minor_version

- name: Set Tomcat Version number
  ansible.builtin.set_fact:
    tomcat_version: "{{ tomcat_version_number | default(latest_tomcat_minor_version.stdout, true) }}"

- name: "Show download info"
  ansible.builtin.debug:
    msg: "tomcat_major_version: {{ tomcat_major_version }} and tomcat_version: {{ tomcat_version }}"

- name: Checking for alternate app directory name
  ansible.builtin.set_fact:
    using_alt_app_dir: true
  when: alt_app_dir_name is defined

- name: "Service: stop"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "stop"
    service_control_service_script_start: "{{ tomcat_install_dir }}/bin/startup.sh"
    service_control_service_script_stop: "{{ tomcat_install_dir }}/bin/shutdown.sh"
    service_control_user: "{{ tomcat_run_user }}"
    service_control_handler: "{{ tomcat_handler_style }}"

- meta: flush_handlers

- name: "Setup handler {{ nodejs_app_control_handler }}"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "setup"
    service_control_home: "{{ tomcat_install_root_current }}"
    service_control_user: "{{ tomcat_run_user }}"
    service_control_handler: "{{ tomcat_handler_style }}"

- name: required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0775"
  with_items:
    - "{{ tomcat_install_dir }}"
    - "{{ tomcat_data_dir }}"
    - "{{ tomcat_log_dir }}"
    - "{{ tomcat_webapp_dir }}"
  become: yes
  become_user: "{{ polaris_install_user }}"

- name: Set Tomcat Download URL
  ansible.builtin.set_fact:
    tomcat_download_url: "{{ tomcat_mirror }}/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.zip"

- ansible.builtin.uri:
    url: "{{ tomcat_download_url + '.' + tomcat_checksum_protocol }}"
    return_content: true
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  register: tomcat_checksum

- ansible.builtin.set_fact:
    tomcat_checksum: "{{ tomcat_checksum.content.split(' ')[0] }}"      # there are 2 spaces

- name: download to {{ tomcat_download_tmp_dir }}/{{ tomcat_download_url | basename }}
  ansible.builtin.get_url:
    url: "{{ tomcat_download_url }}"
    dest: "{{ tomcat_download_tmp_dir }}/{{ tomcat_download_url | basename }}"
    checksum: "{{ tomcat_checksum_protocol }}:{{ tomcat_checksum }}"
    timeout: "{{ timeout | default(100) }}"
    mode: "0755"
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  become: yes
  become_user: "{{ polaris_install_user }}"

- name: load task list for Tomcat {{ tomcat_version }}
  include_tasks: "install-tomcat.yml"

- name: service directory {{ tomcat_service_dir }}
  ansible.builtin.file:
    path: "{{ tomcat_service_dir }}"
    mode: "0775"
    state: directory
  become: yes
  become_user: "{{ polaris_install_user }}"

- name: run script {{ tomcat_service_dir }}/run
  ansible.builtin.template:
    src: "run.j2"
    dest: "{{ tomcat_service_dir }}/run"
    mode: "0775"
  become: yes
  become_user: "{{ polaris_install_user }}"

- name: Patch intention
  include_role:
    name: patch_intention
  vars:
    _tomcat_version: "{{ tomcat_version }}"
    _tomcat_port: "{{ polaris_apps_service_port }}"

- name: Enable rotation of catalina.out
  blockinfile:
    path: "{{ tomcat_install_dir }}/bin/catalina.sh"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: '= "run"'
    block: "{{ lookup('file', 'files/rotate_catalina') }}"
  become: yes
  become_user: "{{ polaris_install_user }}"

- name: "Service: start"
  ansible.builtin.include_role:
    name: service_control
  vars:
    service_control_action: "start"
    service_control_service_script_start: "{{ tomcat_install_dir }}/bin/startup.sh"
    service_control_service_script_stop: "{{ tomcat_install_dir }}/bin/shutdown.sh"
    service_control_user: "{{ tomcat_run_user }}"
    service_control_handler: "{{ tomcat_handler_style }}"

- name: Mark tomcat as called
  ansible.builtin.set_fact:
    role_tomcat_called: true