---
- name: 'Create JDK home directory: {{ jdk_home }}'
  file:
    path: '{{ jdk_home }}'
    state: directory
    mode: '0755'
  become: yes
  become_user: '{{ polaris_install_user }}'

- name: 'Get asset info'
  ansible.builtin.uri:
    url: >-
      {% if jdk_pinned_release_name | length > 0 -%}
      https://api.adoptium.net/v3/assets/release_name/eclipse/{{ jdk_pinned_release_name | urlencode }}?architecture=x64&heap_size=normal&image_type=jdk&jvm_impl=hotspot&os=linux&project=jdk
      {%- else -%}
      https://api.adoptium.net/v3/assets/latest/{{ jdk_major_version }}/hotspot?architecture=x64&image_type=jdk&os=linux&vendor=eclipse
      {%- endif %}
    return_content: yes
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  register: json_response
  when: jdk_type == 'openjdk'

- name: 'Print asset info'
  debug:
    var: json_response.json
  when: jdk_type == 'openjdk'

- name: 'Set asset info for latest release'
  set_fact:
    jdk_checksum_value: '{{ json_response.json | json_query("[0].binary.package.checksum") }}'
    jdk_release_name: '{{ json_response.json | json_query("[0].release_name") }}'
    jdk_major_version: '{{ json_response.json | json_query("[0].version.major") }}'
    jdk_package_name: '{{ json_response.json | json_query("[0].binary.package.name") }}'
    jdk_package_link: '{{ json_response.json | json_query("[0].binary.package.link") }}'
  when: jdk_type == 'openjdk' and jdk_pinned_release_name | length == 0

- name: 'Set asset info for pinned release'
  set_fact:
    jdk_checksum_value: '{{ json_response.json | json_query("binaries[0].package.checksum") }}'
    jdk_release_name: '{{ json_response.json | json_query("release_name") }}'
    jdk_major_version: '{{ json_response.json | json_query("version_data.major") }}'
    jdk_package_name: '{{ json_response.json | json_query("binaries[0].package.name") }}'
    jdk_package_link: '{{ json_response.json | json_query("binaries[0].package.link") }}'
  when: jdk_type == 'openjdk' and jdk_pinned_release_name | length > 0

- name: 'Download the release'
  get_url:
    url: 'https://api.adoptium.net/v3/binary/version/{{ jdk_release_name | urlencode }}/linux/x64/jdk/hotspot/normal/eclipse?project=jdk'
    dest: '{{ jdk_install_root }}/{{ jdk_package_name }}'
    checksum: "sha256:{{ jdk_checksum_value }}"
    validate_certs: false
    timeout: 1000
  environment: "{{ (proxy_env_dev_test if proxy_env == 'dev' or proxy_env == 'test') or (proxy_env_prod if proxy_env == 'prod') | default({}) }}"
  become: yes
  become_user: '{{ polaris_install_user }}'
  when: jdk_type == 'openjdk'

- name: 'Extract the downloaded archive'
  unarchive:
    src: "{{ jdk_install_root }}/{{ jdk_package_name }}"
    dest: "{{ jdk_install_root }}"
    extra_opts: ['--transform=s,/*[^/]*,{{ jdk_install_dir | basename }},i', '--show-stored-names']
    remote_src: yes
  become: yes
  become_user: '{{ polaris_install_user }}'

- name: 'Remove the downloaded archive'
  file:
    path: "{{ jdk_install_root }}/{{ jdk_package_name }}"
    state: absent
  become: yes
  become_user: '{{ polaris_install_user }}'

- name: 'Download IMB trust certs'
  get_url:
    url: "{{ item.url }}"
    dest: "{{ jdk_home }}"
    validate_certs: false
    timeout: 100
  with_items: "{{ jdk_certs }}"
  become: yes
  become_user: '{{ polaris_install_user }}'

- name: 'Set jdk cacerts file'
  set_fact:
    jdk_cacerts_file: '{{ jdk_home }}/{{ "jre/lib/security/cacerts" if jdk_major_version == "8" else "lib/security/cacerts" }}'

- name: 'Import certs'
  java_cert:
    cert_path: "{{ jdk_home }}/{{ item.name }}"
    cert_alias: "{{ item.alias | default(item.name) }}"
    executable: "{{ jdk_keytool }}"
    keystore_pass: "{{ jdk_cacerts_pass }}"
    keystore_path: "{{ jdk_cacerts_file }}"
  with_items: "{{ jdk_certs }}"
  become: yes
  become_user: '{{ polaris_install_user }}'

- name: 'Download JCE to /tmp/{{ jdk_jce_archive }}'
  get_url:
    url: "{{ jdk_jce_download_url }}"
    dest: "/tmp/{{ jdk_jce_archive }}"
    validate_certs: false
    timeout: 100
    mode: '0777'
  become: yes
  become_user: '{{ polaris_install_user }}'
  when: jdk_major_version == '8'

- name: 'Extract JCE JARs to {{ jdk_home }}/jre/lib/security/'
  shell: unzip -j -o /tmp/{{ jdk_jce_archive }} '*.jar'
  args:
    chdir: "{{ jdk_home }}/jre/lib/security/"
  become: yes
  become_user: '{{ polaris_install_user }}'
  when: jdk_major_version == '8'

- name: 'Patch intention'
  include_role:
    name: patch_intention
  vars:
    _jdk_type: "{{ jdk_type }}"
    _jdk_major_version: "{{ jdk_major_version }}"
    _jdk_url: "{{ jdk_package_link }}"
    _jdk_release_name: "{{ jdk_release_name }}"
